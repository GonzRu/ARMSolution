//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DsRouterExchangeProviderLib.DSRouterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LstError", Namespace="http://schemas.datacontract.org/2004/07/InterfaceLibrary")]
    [System.SerializableAttribute()]
    public partial class LstError : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> lstErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> lstError {
            get {
                return this.lstErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.lstErrorField, value) != true)) {
                    this.lstErrorField = value;
                    this.RaisePropertyChanged("lstError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterTagValue", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.AuthResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUser))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventDataType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<ushort, uint>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Tuple<ushort, uint>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Tuple<byte[], string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Tuple<System.DateTime, System.DateTime>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, object>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Tuple<System.DateTime, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<ushort, DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.LstError))]
    public partial class DSRouterTagValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint VarQualityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object VarValueAsObjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint VarQuality {
            get {
                return this.VarQualityField;
            }
            set {
                if ((this.VarQualityField.Equals(value) != true)) {
                    this.VarQualityField = value;
                    this.RaisePropertyChanged("VarQuality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object VarValueAsObject {
            get {
                return this.VarValueAsObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.VarValueAsObjectField, value) != true)) {
                    this.VarValueAsObjectField = value;
                    this.RaisePropertyChanged("VarValueAsObject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RouterAuthResult", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class RouterAuthResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<ushort, DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult> DSAuthResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<ushort, DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult> DSAuthResults {
            get {
                return this.DSAuthResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.DSAuthResultsField, value) != true)) {
                    this.DSAuthResultsField = value;
                    this.RaisePropertyChanged("DSAuthResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterAuthResult", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterAuthResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DsRouterExchangeProviderLib.DSRouterService.AuthResult AuthResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DsRouterExchangeProviderLib.DSRouterService.DSRouterUser UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DsRouterExchangeProviderLib.DSRouterService.AuthResult AuthResult {
            get {
                return this.AuthResultField;
            }
            set {
                if ((this.AuthResultField.Equals(value) != true)) {
                    this.AuthResultField = value;
                    this.RaisePropertyChanged("AuthResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DsRouterExchangeProviderLib.DSRouterService.DSRouterUser User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthResult", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    public enum AuthResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WrongLoginOrPassword = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoConnectionToDb = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoConnectionToDs = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterUser", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup DsRouterUserGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime {
            get {
                return this.CreateDateTimeField;
            }
            set {
                if ((this.CreateDateTimeField.Equals(value) != true)) {
                    this.CreateDateTimeField = value;
                    this.RaisePropertyChanged("CreateDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup DsRouterUserGroup {
            get {
                return this.DsRouterUserGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.DsRouterUserGroupField, value) != true)) {
                    this.DsRouterUserGroupField = value;
                    this.RaisePropertyChanged("DsRouterUserGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditDateTime {
            get {
                return this.EditDateTimeField;
            }
            set {
                if ((this.EditDateTimeField.Equals(value) != true)) {
                    this.EditDateTimeField = value;
                    this.RaisePropertyChanged("EditDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterUserGroup", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterUserGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupRightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime {
            get {
                return this.CreateDateTimeField;
            }
            set {
                if ((this.CreateDateTimeField.Equals(value) != true)) {
                    this.CreateDateTimeField = value;
                    this.RaisePropertyChanged("CreateDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditDateTime {
            get {
                return this.EditDateTimeField;
            }
            set {
                if ((this.EditDateTimeField.Equals(value) != true)) {
                    this.EditDateTimeField = value;
                    this.RaisePropertyChanged("EditDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupComment {
            get {
                return this.GroupCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupCommentField, value) != true)) {
                    this.GroupCommentField = value;
                    this.RaisePropertyChanged("GroupComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupRight {
            get {
                return this.GroupRightField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupRightField, value) != true)) {
                    this.GroupRightField = value;
                    this.RaisePropertyChanged("GroupRight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterEventValue", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterEventValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DevGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort DsGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventDataIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DsRouterExchangeProviderLib.DSRouterService.DSRouterEventDataType EventDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventSourceCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventSourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNeedReceiptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReceiptedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiptMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReceiptTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiptUserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint DevGuid {
            get {
                return this.DevGuidField;
            }
            set {
                if ((this.DevGuidField.Equals(value) != true)) {
                    this.DevGuidField = value;
                    this.RaisePropertyChanged("DevGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort DsGuid {
            get {
                return this.DsGuidField;
            }
            set {
                if ((this.DsGuidField.Equals(value) != true)) {
                    this.DsGuidField = value;
                    this.RaisePropertyChanged("DsGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventDataID {
            get {
                return this.EventDataIDField;
            }
            set {
                if ((this.EventDataIDField.Equals(value) != true)) {
                    this.EventDataIDField = value;
                    this.RaisePropertyChanged("EventDataID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DsRouterExchangeProviderLib.DSRouterService.DSRouterEventDataType EventDataType {
            get {
                return this.EventDataTypeField;
            }
            set {
                if ((this.EventDataTypeField.Equals(value) != true)) {
                    this.EventDataTypeField = value;
                    this.RaisePropertyChanged("EventDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((this.EventIDField.Equals(value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventSourceComment {
            get {
                return this.EventSourceCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.EventSourceCommentField, value) != true)) {
                    this.EventSourceCommentField = value;
                    this.RaisePropertyChanged("EventSourceComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventSourceName {
            get {
                return this.EventSourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventSourceNameField, value) != true)) {
                    this.EventSourceNameField = value;
                    this.RaisePropertyChanged("EventSourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventText {
            get {
                return this.EventTextField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTextField, value) != true)) {
                    this.EventTextField = value;
                    this.RaisePropertyChanged("EventText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventTime {
            get {
                return this.EventTimeField;
            }
            set {
                if ((this.EventTimeField.Equals(value) != true)) {
                    this.EventTimeField = value;
                    this.RaisePropertyChanged("EventTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNeedReceipt {
            get {
                return this.IsNeedReceiptField;
            }
            set {
                if ((this.IsNeedReceiptField.Equals(value) != true)) {
                    this.IsNeedReceiptField = value;
                    this.RaisePropertyChanged("IsNeedReceipt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReceipted {
            get {
                return this.IsReceiptedField;
            }
            set {
                if ((this.IsReceiptedField.Equals(value) != true)) {
                    this.IsReceiptedField = value;
                    this.RaisePropertyChanged("IsReceipted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiptMessage {
            get {
                return this.ReceiptMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiptMessageField, value) != true)) {
                    this.ReceiptMessageField = value;
                    this.RaisePropertyChanged("ReceiptMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReceiptTime {
            get {
                return this.ReceiptTimeField;
            }
            set {
                if ((this.ReceiptTimeField.Equals(value) != true)) {
                    this.ReceiptTimeField = value;
                    this.RaisePropertyChanged("ReceiptTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiptUser {
            get {
                return this.ReceiptUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiptUserField, value) != true)) {
                    this.ReceiptUserField = value;
                    this.RaisePropertyChanged("ReceiptUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterEventDataType", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    public enum DSRouterEventDataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ustavki = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Alarm = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Oscillogram = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterSettingsSet", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterSettingsSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettingsSetCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SettingsSetDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SettingsSetIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettingsSetComment {
            get {
                return this.SettingsSetCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsSetCommentField, value) != true)) {
                    this.SettingsSetCommentField = value;
                    this.RaisePropertyChanged("SettingsSetComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SettingsSetDateTime {
            get {
                return this.SettingsSetDateTimeField;
            }
            set {
                if ((this.SettingsSetDateTimeField.Equals(value) != true)) {
                    this.SettingsSetDateTimeField = value;
                    this.RaisePropertyChanged("SettingsSetDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SettingsSetID {
            get {
                return this.SettingsSetIDField;
            }
            set {
                if ((this.SettingsSetIDField.Equals(value) != true)) {
                    this.SettingsSetIDField = value;
                    this.RaisePropertyChanged("SettingsSetID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumerationCommandStates", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    public enum EnumerationCommandStates : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sentFromClientToRouter = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sentFromRouterToDataServer = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sentFromDataServerToFC = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sentFromFCToDevice = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        complete = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cmdactive = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cmdCancelAtDataServerByTimer = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cmdDiscardByDataServer = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cmdDiscardEcuRtu = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cmdUnknown = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cmdNotSend_DSR_2_DS = 11,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterDocumentDataValue", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterDocumentDataValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DocumentAddDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentUserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DocumentAddDate {
            get {
                return this.DocumentAddDateField;
            }
            set {
                if ((this.DocumentAddDateField.Equals(value) != true)) {
                    this.DocumentAddDateField = value;
                    this.RaisePropertyChanged("DocumentAddDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentComment {
            get {
                return this.DocumentCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentCommentField, value) != true)) {
                    this.DocumentCommentField = value;
                    this.RaisePropertyChanged("DocumentComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentFileName {
            get {
                return this.DocumentFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentFileNameField, value) != true)) {
                    this.DocumentFileNameField = value;
                    this.RaisePropertyChanged("DocumentFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentUserName {
            get {
                return this.DocumentUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentUserNameField, value) != true)) {
                    this.DocumentUserNameField = value;
                    this.RaisePropertyChanged("DocumentUserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterTrendSettings", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterTrendSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<float> AbsoluteErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint MaxCacheMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint MaxCacheValuesCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<float> RelativeErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint SampleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> AbsoluteError {
            get {
                return this.AbsoluteErrorField;
            }
            set {
                if ((this.AbsoluteErrorField.Equals(value) != true)) {
                    this.AbsoluteErrorField = value;
                    this.RaisePropertyChanged("AbsoluteError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enable {
            get {
                return this.EnableField;
            }
            set {
                if ((this.EnableField.Equals(value) != true)) {
                    this.EnableField = value;
                    this.RaisePropertyChanged("Enable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint MaxCacheMinutes {
            get {
                return this.MaxCacheMinutesField;
            }
            set {
                if ((this.MaxCacheMinutesField.Equals(value) != true)) {
                    this.MaxCacheMinutesField = value;
                    this.RaisePropertyChanged("MaxCacheMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint MaxCacheValuesCount {
            get {
                return this.MaxCacheValuesCountField;
            }
            set {
                if ((this.MaxCacheValuesCountField.Equals(value) != true)) {
                    this.MaxCacheValuesCountField = value;
                    this.RaisePropertyChanged("MaxCacheValuesCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> RelativeError {
            get {
                return this.RelativeErrorField;
            }
            set {
                if ((this.RelativeErrorField.Equals(value) != true)) {
                    this.RelativeErrorField = value;
                    this.RaisePropertyChanged("RelativeError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Sample {
            get {
                return this.SampleField;
            }
            set {
                if ((this.SampleField.Equals(value) != true)) {
                    this.SampleField = value;
                    this.RaisePropertyChanged("Sample");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterDailyReportSettings", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterDailyReportSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension ReportExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReportTamplateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension ReportExtension {
            get {
                return this.ReportExtensionField;
            }
            set {
                if ((this.ReportExtensionField.Equals(value) != true)) {
                    this.ReportExtensionField = value;
                    this.RaisePropertyChanged("ReportExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportTamplateName {
            get {
                return this.ReportTamplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportTamplateNameField, value) != true)) {
                    this.ReportTamplateNameField = value;
                    this.RaisePropertyChanged("ReportTamplateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterReportExtension", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    public enum DSRouterReportExtension : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        xls = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        xlsx = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        doc = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pdf = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterEventsReportSettings", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterEventsReportSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DeviceGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort DsGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension ReportExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReportTamplateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint DeviceGuid {
            get {
                return this.DeviceGuidField;
            }
            set {
                if ((this.DeviceGuidField.Equals(value) != true)) {
                    this.DeviceGuidField = value;
                    this.RaisePropertyChanged("DeviceGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort DsGuid {
            get {
                return this.DsGuidField;
            }
            set {
                if ((this.DsGuidField.Equals(value) != true)) {
                    this.DsGuidField = value;
                    this.RaisePropertyChanged("DsGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDateTime {
            get {
                return this.EndDateTimeField;
            }
            set {
                if ((this.EndDateTimeField.Equals(value) != true)) {
                    this.EndDateTimeField = value;
                    this.RaisePropertyChanged("EndDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension ReportExtension {
            get {
                return this.ReportExtensionField;
            }
            set {
                if ((this.ReportExtensionField.Equals(value) != true)) {
                    this.ReportExtensionField = value;
                    this.RaisePropertyChanged("ReportExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportTamplateName {
            get {
                return this.ReportTamplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportTamplateNameField, value) != true)) {
                    this.ReportTamplateNameField = value;
                    this.RaisePropertyChanged("ReportTamplateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDateTime {
            get {
                return this.StartDateTimeField;
            }
            set {
                if ((this.StartDateTimeField.Equals(value) != true)) {
                    this.StartDateTimeField = value;
                    this.RaisePropertyChanged("StartDateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DSRouterTagsReportSettings", Namespace="http://schemas.datacontract.org/2004/07/DSRouterServiceIIS")]
    [System.SerializableAttribute()]
    public partial class DSRouterTagsReportSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint IntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension ReportExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReportTamplateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> TagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDateTime {
            get {
                return this.EndDateTimeField;
            }
            set {
                if ((this.EndDateTimeField.Equals(value) != true)) {
                    this.EndDateTimeField = value;
                    this.RaisePropertyChanged("EndDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Interval {
            get {
                return this.IntervalField;
            }
            set {
                if ((this.IntervalField.Equals(value) != true)) {
                    this.IntervalField = value;
                    this.RaisePropertyChanged("Interval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension ReportExtension {
            get {
                return this.ReportExtensionField;
            }
            set {
                if ((this.ReportExtensionField.Equals(value) != true)) {
                    this.ReportExtensionField = value;
                    this.RaisePropertyChanged("ReportExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportTamplateName {
            get {
                return this.ReportTamplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportTamplateNameField, value) != true)) {
                    this.ReportTamplateNameField = value;
                    this.RaisePropertyChanged("ReportTamplateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDateTime {
            get {
                return this.StartDateTimeField;
            }
            set {
                if ((this.StartDateTimeField.Equals(value) != true)) {
                    this.StartDateTimeField = value;
                    this.RaisePropertyChanged("StartDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DSRouterService.IDSRouter", CallbackContract=typeof(DsRouterExchangeProviderLib.DSRouterService.IDSRouterCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDSRouter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSValueAsByteBuffer", ReplyAction="http://tempuri.org/IDSRouter/GetDSValueAsByteBufferResponse")]
        byte[] GetDSValueAsByteBuffer(ushort DSGuid, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSValueAsByteBuffer", ReplyAction="http://tempuri.org/IDSRouter/GetDSValueAsByteBufferResponse")]
        System.Threading.Tasks.Task<byte[]> GetDSValueAsByteBufferAsync(ushort DSGuid, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSOscByIdInBD", ReplyAction="http://tempuri.org/IDSRouter/GetDSOscByIdInBDResponse")]
        byte[] GetDSOscByIdInBD(ushort DSGuid, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSOscByIdInBD", ReplyAction="http://tempuri.org/IDSRouter/GetDSOscByIdInBDResponse")]
        System.Threading.Tasks.Task<byte[]> GetDSOscByIdInBDAsync(ushort DSGuid, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/SetReq2ArhivInfo")]
        void SetReq2ArhivInfo(ushort DSGuid, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/SetReq2ArhivInfo")]
        System.Threading.Tasks.Task SetReq2ArhivInfoAsync(ushort DSGuid, byte[] arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/RunCMDMOA", ReplyAction="http://tempuri.org/IDSRouter/RunCMDMOAResponse")]
        byte[] RunCMDMOA(ushort DSGuid, byte[] pq);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/RunCMDMOA", ReplyAction="http://tempuri.org/IDSRouter/RunCMDMOAResponse")]
        System.Threading.Tasks.Task<byte[]> RunCMDMOAAsync(ushort DSGuid, byte[] pq);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/RunCMD", ReplyAction="http://tempuri.org/IDSRouter/RunCMDResponse")]
        bool RunCMD(string dsdevTagGUID, byte[] pq);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/RunCMD", ReplyAction="http://tempuri.org/IDSRouter/RunCMDResponse")]
        System.Threading.Tasks.Task<bool> RunCMDAsync(string dsdevTagGUID, byte[] pq);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSConfigFile", ReplyAction="http://tempuri.org/IDSRouter/GetDSConfigFileResponse")]
        System.IO.Stream GetDSConfigFile(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSConfigFile", ReplyAction="http://tempuri.org/IDSRouter/GetDSConfigFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetDSConfigFileAsync(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetDSGUIDsResponse")]
        string GetDSGUIDs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetDSGUIDsResponse")]
        System.Threading.Tasks.Task<string> GetDSGUIDsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSINFO", ReplyAction="http://tempuri.org/IDSRouter/GetDSINFOResponse")]
        string GetDSINFO(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSINFO", ReplyAction="http://tempuri.org/IDSRouter/GetDSINFOResponse")]
        System.Threading.Tasks.Task<string> GetDSINFOAsync(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSourceGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSourceGUIDsResponse")]
        string GetSourceGUIDs(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSourceGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSourceGUIDsResponse")]
        System.Threading.Tasks.Task<string> GetSourceGUIDsAsync(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSourceName", ReplyAction="http://tempuri.org/IDSRouter/GetSourceNameResponse")]
        string GetSourceName(ushort DSGuid, ushort SrcGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSourceName", ReplyAction="http://tempuri.org/IDSRouter/GetSourceNameResponse")]
        System.Threading.Tasks.Task<string> GetSourceNameAsync(ushort DSGuid, ushort SrcGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetECUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetECUGUIDsResponse")]
        string GetECUGUIDs(ushort DSGuid, ushort SrcGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetECUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetECUGUIDsResponse")]
        System.Threading.Tasks.Task<string> GetECUGUIDsAsync(ushort DSGuid, ushort SrcGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetECUName", ReplyAction="http://tempuri.org/IDSRouter/GetECUNameResponse")]
        string GetECUName(ushort DSGuid, ushort SrcGuid, ushort EcuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetECUName", ReplyAction="http://tempuri.org/IDSRouter/GetECUNameResponse")]
        System.Threading.Tasks.Task<string> GetECUNameAsync(ushort DSGuid, ushort SrcGuid, ushort EcuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDsResponse")]
        string GetSrcEcuRTUGUIDs(ushort DSGuid, ushort SrcGuid, ushort EcuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetSrcEcuRTUGUIDsResponse")]
        System.Threading.Tasks.Task<string> GetSrcEcuRTUGUIDsAsync(ushort DSGuid, ushort SrcGuid, ushort EcuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGUIDsResponse")]
        string GetRTUGUIDs(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGUIDsResponse")]
        System.Threading.Tasks.Task<string> GetRTUGUIDsAsync(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsRTUEnable", ReplyAction="http://tempuri.org/IDSRouter/IsRTUEnableResponse")]
        bool IsRTUEnable(ushort DSGuid, uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsRTUEnable", ReplyAction="http://tempuri.org/IDSRouter/IsRTUEnableResponse")]
        System.Threading.Tasks.Task<bool> IsRTUEnableAsync(ushort DSGuid, uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUDescription", ReplyAction="http://tempuri.org/IDSRouter/GetRTUDescriptionResponse")]
        string GetRTUDescription(ushort DSGuid, uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUDescription", ReplyAction="http://tempuri.org/IDSRouter/GetRTUDescriptionResponse")]
        System.Threading.Tasks.Task<string> GetRTUDescriptionAsync(ushort DSGuid, uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetGroupGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetGroupGUIDsResponse")]
        string GetGroupGUIDs(ushort DSGuid, uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetGroupGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetGroupGUIDsResponse")]
        System.Threading.Tasks.Task<string> GetGroupGUIDsAsync(ushort DSGuid, uint RtuGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsGroupEnable", ReplyAction="http://tempuri.org/IDSRouter/IsGroupEnableResponse")]
        bool IsGroupEnable(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsGroupEnable", ReplyAction="http://tempuri.org/IDSRouter/IsGroupEnableResponse")]
        System.Threading.Tasks.Task<bool> IsGroupEnableAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUGroupName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGroupNameResponse")]
        string GetRTUGroupName(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUGroupName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUGroupNameResponse")]
        System.Threading.Tasks.Task<string> GetRTUGroupNameAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroup", ReplyAction="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroupResponse")]
        string GetSubGroupGUIDsInGroup(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroup", ReplyAction="http://tempuri.org/IDSRouter/GetSubGroupGUIDsInGroupResponse")]
        System.Threading.Tasks.Task<string> GetSubGroupGUIDsInGroupAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDsResponse")]
        string GetRtuGroupTagGUIDs(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDs", ReplyAction="http://tempuri.org/IDSRouter/GetRtuGroupTagGUIDsResponse")]
        System.Threading.Tasks.Task<string> GetRtuGroupTagGUIDsAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUTagName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUTagNameResponse")]
        string GetRTUTagName(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetRTUTagName", ReplyAction="http://tempuri.org/IDSRouter/GetRTUTagNameResponse")]
        System.Threading.Tasks.Task<string> GetRTUTagNameAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSLastErrorsGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorsGUIDResponse")]
        DsRouterExchangeProviderLib.DSRouterService.LstError GetDSLastErrorsGUID(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSLastErrorsGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorsGUIDResponse")]
        System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.LstError> GetDSLastErrorsGUIDAsync(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSLastErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorGUIDResponse")]
        string GetDSLastErrorGUID(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSLastErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSLastErrorGUIDResponse")]
        System.Threading.Tasks.Task<string> GetDSLastErrorGUIDAsync(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUIDResponse")]
        string GetDSErrorTextByErrorGUID(ushort DSGuid, string errorGUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUID", ReplyAction="http://tempuri.org/IDSRouter/GetDSErrorTextByErrorGUIDResponse")]
        System.Threading.Tasks.Task<string> GetDSErrorTextByErrorGUIDAsync(ushort DSGuid, string errorGUID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/AcknowledgementOfErrors")]
        void AcknowledgementOfErrors(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/AcknowledgementOfErrors")]
        System.Threading.Tasks.Task AcknowledgementOfErrorsAsync(ushort DSGuid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/RegisterForErrorEvent")]
        void RegisterForErrorEvent(string keyticker);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/RegisterForErrorEvent")]
        System.Threading.Tasks.Task RegisterForErrorEventAsync(string keyticker);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/Ping")]
        void Ping();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/Ping")]
        System.Threading.Tasks.Task PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsValue", ReplyAction="http://tempuri.org/IDSRouter/GetTagsValueResponse")]
        System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetTagsValue(System.Collections.Generic.List<string> ATagIDsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsValue", ReplyAction="http://tempuri.org/IDSRouter/GetTagsValueResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetTagsValueAsync(System.Collections.Generic.List<string> ATagIDsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsValuesUpdated", ReplyAction="http://tempuri.org/IDSRouter/GetTagsValuesUpdatedResponse")]
        System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetTagsValuesUpdated();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsValuesUpdated", ReplyAction="http://tempuri.org/IDSRouter/GetTagsValuesUpdatedResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetTagsValuesUpdatedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/Authorization", ReplyAction="http://tempuri.org/IDSRouter/AuthorizationResponse")]
        DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult Authorization(string userName, string userPassword, bool isFirstEnter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/Authorization", ReplyAction="http://tempuri.org/IDSRouter/AuthorizationResponse")]
        System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult> AuthorizationAsync(string userName, string userPassword, bool isFirstEnter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetUsersList", ReplyAction="http://tempuri.org/IDSRouter/GetUsersListResponse")]
        System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser> GetUsersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetUsersList", ReplyAction="http://tempuri.org/IDSRouter/GetUsersListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser>> GetUsersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetUserGroupsList", ReplyAction="http://tempuri.org/IDSRouter/GetUserGroupsListResponse")]
        System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup> GetUserGroupsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetUserGroupsList", ReplyAction="http://tempuri.org/IDSRouter/GetUserGroupsListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup>> GetUserGroupsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CreateUserGroup", ReplyAction="http://tempuri.org/IDSRouter/CreateUserGroupResponse")]
        bool CreateUserGroup(string groupName, string groupComment, string groupRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CreateUserGroup", ReplyAction="http://tempuri.org/IDSRouter/CreateUserGroupResponse")]
        System.Threading.Tasks.Task<bool> CreateUserGroupAsync(string groupName, string groupComment, string groupRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CreateUser", ReplyAction="http://tempuri.org/IDSRouter/CreateUserResponse")]
        bool CreateUser(string userName, string userPassword, string userComment, int userGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CreateUser", ReplyAction="http://tempuri.org/IDSRouter/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(string userName, string userPassword, string userComment, int userGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetEvents", ReplyAction="http://tempuri.org/IDSRouter/GetEventsResponse")]
        System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> GetEvents(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, System.Collections.Generic.List<System.Tuple<ushort, uint>> requestDevicesList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetEvents", ReplyAction="http://tempuri.org/IDSRouter/GetEventsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>> GetEventsAsync(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, System.Collections.Generic.List<System.Tuple<ushort, uint>> requestDevicesList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetOscillogramAsUrlByID", ReplyAction="http://tempuri.org/IDSRouter/GetOscillogramAsUrlByIDResponse")]
        string GetOscillogramAsUrlByID(ushort dsGuid, int eventDataID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetOscillogramAsUrlByID", ReplyAction="http://tempuri.org/IDSRouter/GetOscillogramAsUrlByIDResponse")]
        System.Threading.Tasks.Task<string> GetOscillogramAsUrlByIDAsync(ushort dsGuid, int eventDataID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetOscillogramAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetOscillogramAsByteArrayResponse")]
        System.Tuple<byte[], string> GetOscillogramAsByteArray(ushort dsGuid, int eventDataID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetOscillogramAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetOscillogramAsByteArrayResponse")]
        System.Threading.Tasks.Task<System.Tuple<byte[], string>> GetOscillogramAsByteArrayAsync(ushort dsGuid, int eventDataID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetHistoricalDataByID", ReplyAction="http://tempuri.org/IDSRouter/GetHistoricalDataByIDResponse")]
        System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetHistoricalDataByID(ushort dsGuid, int dataID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetHistoricalDataByID", ReplyAction="http://tempuri.org/IDSRouter/GetHistoricalDataByIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetHistoricalDataByIDAsync(ushort dsGuid, int dataID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsNotReceiptedEventsExist", ReplyAction="http://tempuri.org/IDSRouter/IsNotReceiptedEventsExistResponse")]
        bool IsNotReceiptedEventsExist();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsNotReceiptedEventsExist", ReplyAction="http://tempuri.org/IDSRouter/IsNotReceiptedEventsExistResponse")]
        System.Threading.Tasks.Task<bool> IsNotReceiptedEventsExistAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetNotReceiptedEvents", ReplyAction="http://tempuri.org/IDSRouter/GetNotReceiptedEventsResponse")]
        System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> GetNotReceiptedEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetNotReceiptedEvents", ReplyAction="http://tempuri.org/IDSRouter/GetNotReceiptedEventsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>> GetNotReceiptedEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/ReceiptAllEvents", ReplyAction="http://tempuri.org/IDSRouter/ReceiptAllEventsResponse")]
        void ReceiptAllEvents(string receiptComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/ReceiptAllEvents", ReplyAction="http://tempuri.org/IDSRouter/ReceiptAllEventsResponse")]
        System.Threading.Tasks.Task ReceiptAllEventsAsync(string receiptComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/ReceiptEvents", ReplyAction="http://tempuri.org/IDSRouter/ReceiptEventsResponse")]
        void ReceiptEvents(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> eventValues, string receiptComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/ReceiptEvents", ReplyAction="http://tempuri.org/IDSRouter/ReceiptEventsResponse")]
        System.Threading.Tasks.Task ReceiptEventsAsync(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> eventValues, string receiptComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSettingsSetsList", ReplyAction="http://tempuri.org/IDSRouter/GetSettingsSetsListResponse")]
        System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet> GetSettingsSetsList(ushort dsGuid, uint devGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetSettingsSetsList", ReplyAction="http://tempuri.org/IDSRouter/GetSettingsSetsListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet>> GetSettingsSetsListAsync(ushort dsGuid, uint devGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetValuesFromSettingsSet", ReplyAction="http://tempuri.org/IDSRouter/GetValuesFromSettingsSetResponse")]
        System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetValuesFromSettingsSet(ushort dsGuid, int settingsSetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetValuesFromSettingsSet", ReplyAction="http://tempuri.org/IDSRouter/GetValuesFromSettingsSetResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetValuesFromSettingsSetAsync(ushort dsGuid, int settingsSetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SaveSettingsToDevice", ReplyAction="http://tempuri.org/IDSRouter/SaveSettingsToDeviceResponse")]
        void SaveSettingsToDevice(ushort dsGuid, uint devGuid, System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> tagsValues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SaveSettingsToDevice", ReplyAction="http://tempuri.org/IDSRouter/SaveSettingsToDeviceResponse")]
        System.Threading.Tasks.Task SaveSettingsToDeviceAsync(ushort dsGuid, uint devGuid, System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> tagsValues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CommandRun", ReplyAction="http://tempuri.org/IDSRouter/CommandRunResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<ushort, uint>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<ushort, uint>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<byte[], string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, object>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<ushort, DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.LstError))]
        void CommandRun(string ACommandID, System.Collections.Generic.List<object> AParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CommandRun", ReplyAction="http://tempuri.org/IDSRouter/CommandRunResponse")]
        System.Threading.Tasks.Task CommandRunAsync(string ACommandID, System.Collections.Generic.List<object> AParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CommandStateCheck", ReplyAction="http://tempuri.org/IDSRouter/CommandStateCheckResponse")]
        DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates CommandStateCheck(string ACommandID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/CommandStateCheck", ReplyAction="http://tempuri.org/IDSRouter/CommandStateCheckResponse")]
        System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates> CommandStateCheckAsync(string ACommandID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDocumentsList", ReplyAction="http://tempuri.org/IDSRouter/GetDocumentsListResponse")]
        System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue> GetDocumentsList(ushort dsGuid, int devGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDocumentsList", ReplyAction="http://tempuri.org/IDSRouter/GetDocumentsListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue>> GetDocumentsListAsync(ushort dsGuid, int devGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDocumentByID", ReplyAction="http://tempuri.org/IDSRouter/GetDocumentByIDResponse")]
        string GetDocumentByID(ushort dsGuid, int documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDocumentByID", ReplyAction="http://tempuri.org/IDSRouter/GetDocumentByIDResponse")]
        System.Threading.Tasks.Task<string> GetDocumentByIDAsync(ushort dsGuid, int documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/InitUploadFileSession", ReplyAction="http://tempuri.org/IDSRouter/InitUploadFileSessionResponse")]
        bool InitUploadFileSession(ushort dsGuid, int devGuid, string fileName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/InitUploadFileSession", ReplyAction="http://tempuri.org/IDSRouter/InitUploadFileSessionResponse")]
        System.Threading.Tasks.Task<bool> InitUploadFileSessionAsync(ushort dsGuid, int devGuid, string fileName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/UploadFileChunk", ReplyAction="http://tempuri.org/IDSRouter/UploadFileChunkResponse")]
        bool UploadFileChunk(byte[] fileChunkBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/UploadFileChunk", ReplyAction="http://tempuri.org/IDSRouter/UploadFileChunkResponse")]
        System.Threading.Tasks.Task<bool> UploadFileChunkAsync(byte[] fileChunkBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SaveUploadedFile", ReplyAction="http://tempuri.org/IDSRouter/SaveUploadedFileResponse")]
        string SaveUploadedFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SaveUploadedFile", ReplyAction="http://tempuri.org/IDSRouter/SaveUploadedFileResponse")]
        System.Threading.Tasks.Task<string> SaveUploadedFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/TerminateUploadFileSession", ReplyAction="http://tempuri.org/IDSRouter/TerminateUploadFileSessionResponse")]
        void TerminateUploadFileSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/TerminateUploadFileSession", ReplyAction="http://tempuri.org/IDSRouter/TerminateUploadFileSessionResponse")]
        System.Threading.Tasks.Task TerminateUploadFileSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetCurrentDateTime", ReplyAction="http://tempuri.org/IDSRouter/GetCurrentDateTimeResponse")]
        System.DateTime GetCurrentDateTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetCurrentDateTime", ReplyAction="http://tempuri.org/IDSRouter/GetCurrentDateTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetCurrentDateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/SetTagValueFromHMI")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<ushort, uint>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<ushort, uint>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<byte[], string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, object>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<ushort, DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.LstError))]
        void SetTagValueFromHMI(ushort dsGuid, uint devGuid, uint tagGuid, object valinobject);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/SetTagValueFromHMI")]
        System.Threading.Tasks.Task SetTagValueFromHMIAsync(ushort dsGuid, uint devGuid, uint tagGuid, object valinobject);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/ReSetTagValueFromHMI")]
        void ReSetTagValueFromHMI(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/ReSetTagValueFromHMI")]
        System.Threading.Tasks.Task ReSetTagValueFromHMIAsync(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IDSRouter/GetTagAnalogTransformationRatioResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<ushort, uint>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<ushort, uint>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<byte[], string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, object>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<ushort, DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.LstError))]
        object GetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IDSRouter/GetTagAnalogTransformationRatioResponse")]
        System.Threading.Tasks.Task<object> GetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IDSRouter/SetTagAnalogTransformationRatioResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.AuthResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventDataType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterReportExtension))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<ushort, uint>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<ushort, uint>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<byte[], string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<System.DateTime, object>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Tuple<System.DateTime, object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<ushort, DsRouterExchangeProviderLib.DSRouterService.DSRouterAuthResult>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DsRouterExchangeProviderLib.DSRouterService.LstError))]
        void SetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IDSRouter/SetTagAnalogTransformationRatioResponse")]
        System.Threading.Tasks.Task SetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/ReSetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IDSRouter/ReSetTagAnalogTransformationRatioResponse")]
        void ReSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/ReSetTagAnalogTransformationRatio", ReplyAction="http://tempuri.org/IDSRouter/ReSetTagAnalogTransformationRatioResponse")]
        System.Threading.Tasks.Task ReSetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsInverseDiscretTag", ReplyAction="http://tempuri.org/IDSRouter/IsInverseDiscretTagResponse")]
        System.Nullable<bool> IsInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/IsInverseDiscretTag", ReplyAction="http://tempuri.org/IDSRouter/IsInverseDiscretTagResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> IsInverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/InverseDiscretTag", ReplyAction="http://tempuri.org/IDSRouter/InverseDiscretTagResponse")]
        void InverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid, bool newInverseValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/InverseDiscretTag", ReplyAction="http://tempuri.org/IDSRouter/InverseDiscretTagResponse")]
        System.Threading.Tasks.Task InverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid, bool newInverseValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsListWithEnabledTrendSave", ReplyAction="http://tempuri.org/IDSRouter/GetTagsListWithEnabledTrendSaveResponse")]
        System.Collections.Generic.List<string> GetTagsListWithEnabledTrendSave();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsListWithEnabledTrendSave", ReplyAction="http://tempuri.org/IDSRouter/GetTagsListWithEnabledTrendSaveResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetTagsListWithEnabledTrendSaveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTrendDateTimeRanges", ReplyAction="http://tempuri.org/IDSRouter/GetTrendDateTimeRangesResponse")]
        System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>> GetTrendDateTimeRanges(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTrendDateTimeRanges", ReplyAction="http://tempuri.org/IDSRouter/GetTrendDateTimeRangesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>>> GetTrendDateTimeRangesAsync(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagTrend", ReplyAction="http://tempuri.org/IDSRouter/GetTagTrendResponse")]
        System.Collections.Generic.List<System.Tuple<System.DateTime, object>> GetTagTrend(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagTrend", ReplyAction="http://tempuri.org/IDSRouter/GetTagTrendResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>> GetTagTrendAsync(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagTrendsList", ReplyAction="http://tempuri.org/IDSRouter/GetTagTrendsListResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>> GetTagTrendsList(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagTrendsList", ReplyAction="http://tempuri.org/IDSRouter/GetTagTrendsListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>>> GetTagTrendsListAsync(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTrendSettings", ReplyAction="http://tempuri.org/IDSRouter/GetTrendSettingsResponse")]
        DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings GetTrendSettings(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTrendSettings", ReplyAction="http://tempuri.org/IDSRouter/GetTrendSettingsResponse")]
        System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings> GetTrendSettingsAsync(ushort dsGuid, uint devGuid, uint tagGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SetTrendSettings", ReplyAction="http://tempuri.org/IDSRouter/SetTrendSettingsResponse")]
        void SetTrendSettings(ushort dsGuid, uint devGuid, uint tagGuid, DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings trendSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/SetTrendSettings", ReplyAction="http://tempuri.org/IDSRouter/SetTrendSettingsResponse")]
        System.Threading.Tasks.Task SetTrendSettingsAsync(ushort dsGuid, uint devGuid, uint tagGuid, DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings trendSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDailyReport", ReplyAction="http://tempuri.org/IDSRouter/GetDailyReportResponse")]
        string GetDailyReport(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDailyReport", ReplyAction="http://tempuri.org/IDSRouter/GetDailyReportResponse")]
        System.Threading.Tasks.Task<string> GetDailyReportAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDailyReportAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetDailyReportAsByteArrayResponse")]
        byte[] GetDailyReportAsByteArray(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetDailyReportAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetDailyReportAsByteArrayResponse")]
        System.Threading.Tasks.Task<byte[]> GetDailyReportAsByteArrayAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetEventsReport", ReplyAction="http://tempuri.org/IDSRouter/GetEventsReportResponse")]
        string GetEventsReport(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetEventsReport", ReplyAction="http://tempuri.org/IDSRouter/GetEventsReportResponse")]
        System.Threading.Tasks.Task<string> GetEventsReportAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetEventsReportAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetEventsReportAsByteArrayResponse")]
        byte[] GetEventsReportAsByteArray(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetEventsReportAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetEventsReportAsByteArrayResponse")]
        System.Threading.Tasks.Task<byte[]> GetEventsReportAsByteArrayAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsReport", ReplyAction="http://tempuri.org/IDSRouter/GetTagsReportResponse")]
        string GetTagsReport(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsReport", ReplyAction="http://tempuri.org/IDSRouter/GetTagsReportResponse")]
        System.Threading.Tasks.Task<string> GetTagsReportAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsReportAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetTagsReportAsByteArrayResponse")]
        byte[] GetTagsReportAsByteArray(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDSRouter/GetTagsReportAsByteArray", ReplyAction="http://tempuri.org/IDSRouter/GetTagsReportAsByteArrayResponse")]
        System.Threading.Tasks.Task<byte[]> GetTagsReportAsByteArrayAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDSRouterCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/NewErrorEvent")]
        void NewErrorEvent(string codeDataTimeEvent);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/Pong")]
        void Pong();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/NotifyChangedTags")]
        void NotifyChangedTags(System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> lstChangedTags);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDSRouter/NotifyCMDExecuted")]
        void NotifyCMDExecuted(byte[] cmdarray);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDSRouterChannel : DsRouterExchangeProviderLib.DSRouterService.IDSRouter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DSRouterClient : System.ServiceModel.DuplexClientBase<DsRouterExchangeProviderLib.DSRouterService.IDSRouter>, DsRouterExchangeProviderLib.DSRouterService.IDSRouter {
        
        public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DSRouterClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public byte[] GetDSValueAsByteBuffer(ushort DSGuid, byte[] arr) {
            return base.Channel.GetDSValueAsByteBuffer(DSGuid, arr);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDSValueAsByteBufferAsync(ushort DSGuid, byte[] arr) {
            return base.Channel.GetDSValueAsByteBufferAsync(DSGuid, arr);
        }
        
        public byte[] GetDSOscByIdInBD(ushort DSGuid, byte[] arr) {
            return base.Channel.GetDSOscByIdInBD(DSGuid, arr);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDSOscByIdInBDAsync(ushort DSGuid, byte[] arr) {
            return base.Channel.GetDSOscByIdInBDAsync(DSGuid, arr);
        }
        
        public void SetReq2ArhivInfo(ushort DSGuid, byte[] arr) {
            base.Channel.SetReq2ArhivInfo(DSGuid, arr);
        }
        
        public System.Threading.Tasks.Task SetReq2ArhivInfoAsync(ushort DSGuid, byte[] arr) {
            return base.Channel.SetReq2ArhivInfoAsync(DSGuid, arr);
        }
        
        public byte[] RunCMDMOA(ushort DSGuid, byte[] pq) {
            return base.Channel.RunCMDMOA(DSGuid, pq);
        }
        
        public System.Threading.Tasks.Task<byte[]> RunCMDMOAAsync(ushort DSGuid, byte[] pq) {
            return base.Channel.RunCMDMOAAsync(DSGuid, pq);
        }
        
        public bool RunCMD(string dsdevTagGUID, byte[] pq) {
            return base.Channel.RunCMD(dsdevTagGUID, pq);
        }
        
        public System.Threading.Tasks.Task<bool> RunCMDAsync(string dsdevTagGUID, byte[] pq) {
            return base.Channel.RunCMDAsync(dsdevTagGUID, pq);
        }
        
        public System.IO.Stream GetDSConfigFile(ushort DSGuid) {
            return base.Channel.GetDSConfigFile(DSGuid);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetDSConfigFileAsync(ushort DSGuid) {
            return base.Channel.GetDSConfigFileAsync(DSGuid);
        }
        
        public string GetDSGUIDs() {
            return base.Channel.GetDSGUIDs();
        }
        
        public System.Threading.Tasks.Task<string> GetDSGUIDsAsync() {
            return base.Channel.GetDSGUIDsAsync();
        }
        
        public string GetDSINFO(ushort DSGuid) {
            return base.Channel.GetDSINFO(DSGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetDSINFOAsync(ushort DSGuid) {
            return base.Channel.GetDSINFOAsync(DSGuid);
        }
        
        public string GetSourceGUIDs(ushort DSGuid) {
            return base.Channel.GetSourceGUIDs(DSGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetSourceGUIDsAsync(ushort DSGuid) {
            return base.Channel.GetSourceGUIDsAsync(DSGuid);
        }
        
        public string GetSourceName(ushort DSGuid, ushort SrcGuid) {
            return base.Channel.GetSourceName(DSGuid, SrcGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetSourceNameAsync(ushort DSGuid, ushort SrcGuid) {
            return base.Channel.GetSourceNameAsync(DSGuid, SrcGuid);
        }
        
        public string GetECUGUIDs(ushort DSGuid, ushort SrcGuid) {
            return base.Channel.GetECUGUIDs(DSGuid, SrcGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetECUGUIDsAsync(ushort DSGuid, ushort SrcGuid) {
            return base.Channel.GetECUGUIDsAsync(DSGuid, SrcGuid);
        }
        
        public string GetECUName(ushort DSGuid, ushort SrcGuid, ushort EcuGuid) {
            return base.Channel.GetECUName(DSGuid, SrcGuid, EcuGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetECUNameAsync(ushort DSGuid, ushort SrcGuid, ushort EcuGuid) {
            return base.Channel.GetECUNameAsync(DSGuid, SrcGuid, EcuGuid);
        }
        
        public string GetSrcEcuRTUGUIDs(ushort DSGuid, ushort SrcGuid, ushort EcuGuid) {
            return base.Channel.GetSrcEcuRTUGUIDs(DSGuid, SrcGuid, EcuGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetSrcEcuRTUGUIDsAsync(ushort DSGuid, ushort SrcGuid, ushort EcuGuid) {
            return base.Channel.GetSrcEcuRTUGUIDsAsync(DSGuid, SrcGuid, EcuGuid);
        }
        
        public string GetRTUGUIDs(ushort DSGuid) {
            return base.Channel.GetRTUGUIDs(DSGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetRTUGUIDsAsync(ushort DSGuid) {
            return base.Channel.GetRTUGUIDsAsync(DSGuid);
        }
        
        public bool IsRTUEnable(ushort DSGuid, uint RtuGuid) {
            return base.Channel.IsRTUEnable(DSGuid, RtuGuid);
        }
        
        public System.Threading.Tasks.Task<bool> IsRTUEnableAsync(ushort DSGuid, uint RtuGuid) {
            return base.Channel.IsRTUEnableAsync(DSGuid, RtuGuid);
        }
        
        public string GetRTUDescription(ushort DSGuid, uint RtuGuid) {
            return base.Channel.GetRTUDescription(DSGuid, RtuGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetRTUDescriptionAsync(ushort DSGuid, uint RtuGuid) {
            return base.Channel.GetRTUDescriptionAsync(DSGuid, RtuGuid);
        }
        
        public string GetGroupGUIDs(ushort DSGuid, uint RtuGuid) {
            return base.Channel.GetGroupGUIDs(DSGuid, RtuGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetGroupGUIDsAsync(ushort DSGuid, uint RtuGuid) {
            return base.Channel.GetGroupGUIDsAsync(DSGuid, RtuGuid);
        }
        
        public bool IsGroupEnable(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.IsGroupEnable(DSGuid, RtuGuid, GroupGuid);
        }
        
        public System.Threading.Tasks.Task<bool> IsGroupEnableAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.IsGroupEnableAsync(DSGuid, RtuGuid, GroupGuid);
        }
        
        public string GetRTUGroupName(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetRTUGroupName(DSGuid, RtuGuid, GroupGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetRTUGroupNameAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetRTUGroupNameAsync(DSGuid, RtuGuid, GroupGuid);
        }
        
        public string GetSubGroupGUIDsInGroup(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetSubGroupGUIDsInGroup(DSGuid, RtuGuid, GroupGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetSubGroupGUIDsInGroupAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetSubGroupGUIDsInGroupAsync(DSGuid, RtuGuid, GroupGuid);
        }
        
        public string GetRtuGroupTagGUIDs(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetRtuGroupTagGUIDs(DSGuid, RtuGuid, GroupGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetRtuGroupTagGUIDsAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid) {
            return base.Channel.GetRtuGroupTagGUIDsAsync(DSGuid, RtuGuid, GroupGuid);
        }
        
        public string GetRTUTagName(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID) {
            return base.Channel.GetRTUTagName(DSGuid, RtuGuid, GroupGuid, TagGUID);
        }
        
        public System.Threading.Tasks.Task<string> GetRTUTagNameAsync(ushort DSGuid, uint RtuGuid, uint GroupGuid, uint TagGUID) {
            return base.Channel.GetRTUTagNameAsync(DSGuid, RtuGuid, GroupGuid, TagGUID);
        }
        
        public DsRouterExchangeProviderLib.DSRouterService.LstError GetDSLastErrorsGUID(ushort DSGuid) {
            return base.Channel.GetDSLastErrorsGUID(DSGuid);
        }
        
        public System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.LstError> GetDSLastErrorsGUIDAsync(ushort DSGuid) {
            return base.Channel.GetDSLastErrorsGUIDAsync(DSGuid);
        }
        
        public string GetDSLastErrorGUID(ushort DSGuid) {
            return base.Channel.GetDSLastErrorGUID(DSGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetDSLastErrorGUIDAsync(ushort DSGuid) {
            return base.Channel.GetDSLastErrorGUIDAsync(DSGuid);
        }
        
        public string GetDSErrorTextByErrorGUID(ushort DSGuid, string errorGUID) {
            return base.Channel.GetDSErrorTextByErrorGUID(DSGuid, errorGUID);
        }
        
        public System.Threading.Tasks.Task<string> GetDSErrorTextByErrorGUIDAsync(ushort DSGuid, string errorGUID) {
            return base.Channel.GetDSErrorTextByErrorGUIDAsync(DSGuid, errorGUID);
        }
        
        public void AcknowledgementOfErrors(ushort DSGuid) {
            base.Channel.AcknowledgementOfErrors(DSGuid);
        }
        
        public System.Threading.Tasks.Task AcknowledgementOfErrorsAsync(ushort DSGuid) {
            return base.Channel.AcknowledgementOfErrorsAsync(DSGuid);
        }
        
        public void RegisterForErrorEvent(string keyticker) {
            base.Channel.RegisterForErrorEvent(keyticker);
        }
        
        public System.Threading.Tasks.Task RegisterForErrorEventAsync(string keyticker) {
            return base.Channel.RegisterForErrorEventAsync(keyticker);
        }
        
        public void Ping() {
            base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetTagsValue(System.Collections.Generic.List<string> ATagIDsList) {
            return base.Channel.GetTagsValue(ATagIDsList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetTagsValueAsync(System.Collections.Generic.List<string> ATagIDsList) {
            return base.Channel.GetTagsValueAsync(ATagIDsList);
        }
        
        public System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetTagsValuesUpdated() {
            return base.Channel.GetTagsValuesUpdated();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetTagsValuesUpdatedAsync() {
            return base.Channel.GetTagsValuesUpdatedAsync();
        }
        
        public DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult Authorization(string userName, string userPassword, bool isFirstEnter) {
            return base.Channel.Authorization(userName, userPassword, isFirstEnter);
        }
        
        public System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.RouterAuthResult> AuthorizationAsync(string userName, string userPassword, bool isFirstEnter) {
            return base.Channel.AuthorizationAsync(userName, userPassword, isFirstEnter);
        }
        
        public System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser> GetUsersList() {
            return base.Channel.GetUsersList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUser>> GetUsersListAsync() {
            return base.Channel.GetUsersListAsync();
        }
        
        public System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup> GetUserGroupsList() {
            return base.Channel.GetUserGroupsList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterUserGroup>> GetUserGroupsListAsync() {
            return base.Channel.GetUserGroupsListAsync();
        }
        
        public bool CreateUserGroup(string groupName, string groupComment, string groupRight) {
            return base.Channel.CreateUserGroup(groupName, groupComment, groupRight);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserGroupAsync(string groupName, string groupComment, string groupRight) {
            return base.Channel.CreateUserGroupAsync(groupName, groupComment, groupRight);
        }
        
        public bool CreateUser(string userName, string userPassword, string userComment, int userGroupID) {
            return base.Channel.CreateUser(userName, userPassword, userComment, userGroupID);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(string userName, string userPassword, string userComment, int userGroupID) {
            return base.Channel.CreateUserAsync(userName, userPassword, userComment, userGroupID);
        }
        
        public System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> GetEvents(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, System.Collections.Generic.List<System.Tuple<ushort, uint>> requestDevicesList) {
            return base.Channel.GetEvents(dateTimeFrom, dateTimeTo, needSystemEvents, needUserEvents, needTerminalEvents, requestDevicesList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>> GetEventsAsync(System.DateTime dateTimeFrom, System.DateTime dateTimeTo, bool needSystemEvents, bool needUserEvents, bool needTerminalEvents, System.Collections.Generic.List<System.Tuple<ushort, uint>> requestDevicesList) {
            return base.Channel.GetEventsAsync(dateTimeFrom, dateTimeTo, needSystemEvents, needUserEvents, needTerminalEvents, requestDevicesList);
        }
        
        public string GetOscillogramAsUrlByID(ushort dsGuid, int eventDataID) {
            return base.Channel.GetOscillogramAsUrlByID(dsGuid, eventDataID);
        }
        
        public System.Threading.Tasks.Task<string> GetOscillogramAsUrlByIDAsync(ushort dsGuid, int eventDataID) {
            return base.Channel.GetOscillogramAsUrlByIDAsync(dsGuid, eventDataID);
        }
        
        public System.Tuple<byte[], string> GetOscillogramAsByteArray(ushort dsGuid, int eventDataID) {
            return base.Channel.GetOscillogramAsByteArray(dsGuid, eventDataID);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<byte[], string>> GetOscillogramAsByteArrayAsync(ushort dsGuid, int eventDataID) {
            return base.Channel.GetOscillogramAsByteArrayAsync(dsGuid, eventDataID);
        }
        
        public System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetHistoricalDataByID(ushort dsGuid, int dataID) {
            return base.Channel.GetHistoricalDataByID(dsGuid, dataID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetHistoricalDataByIDAsync(ushort dsGuid, int dataID) {
            return base.Channel.GetHistoricalDataByIDAsync(dsGuid, dataID);
        }
        
        public bool IsNotReceiptedEventsExist() {
            return base.Channel.IsNotReceiptedEventsExist();
        }
        
        public System.Threading.Tasks.Task<bool> IsNotReceiptedEventsExistAsync() {
            return base.Channel.IsNotReceiptedEventsExistAsync();
        }
        
        public System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> GetNotReceiptedEvents() {
            return base.Channel.GetNotReceiptedEvents();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue>> GetNotReceiptedEventsAsync() {
            return base.Channel.GetNotReceiptedEventsAsync();
        }
        
        public void ReceiptAllEvents(string receiptComment) {
            base.Channel.ReceiptAllEvents(receiptComment);
        }
        
        public System.Threading.Tasks.Task ReceiptAllEventsAsync(string receiptComment) {
            return base.Channel.ReceiptAllEventsAsync(receiptComment);
        }
        
        public void ReceiptEvents(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> eventValues, string receiptComment) {
            base.Channel.ReceiptEvents(eventValues, receiptComment);
        }
        
        public System.Threading.Tasks.Task ReceiptEventsAsync(System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterEventValue> eventValues, string receiptComment) {
            return base.Channel.ReceiptEventsAsync(eventValues, receiptComment);
        }
        
        public System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet> GetSettingsSetsList(ushort dsGuid, uint devGuid) {
            return base.Channel.GetSettingsSetsList(dsGuid, devGuid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterSettingsSet>> GetSettingsSetsListAsync(ushort dsGuid, uint devGuid) {
            return base.Channel.GetSettingsSetsListAsync(dsGuid, devGuid);
        }
        
        public System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> GetValuesFromSettingsSet(ushort dsGuid, int settingsSetID) {
            return base.Channel.GetValuesFromSettingsSet(dsGuid, settingsSetID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue>> GetValuesFromSettingsSetAsync(ushort dsGuid, int settingsSetID) {
            return base.Channel.GetValuesFromSettingsSetAsync(dsGuid, settingsSetID);
        }
        
        public void SaveSettingsToDevice(ushort dsGuid, uint devGuid, System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> tagsValues) {
            base.Channel.SaveSettingsToDevice(dsGuid, devGuid, tagsValues);
        }
        
        public System.Threading.Tasks.Task SaveSettingsToDeviceAsync(ushort dsGuid, uint devGuid, System.Collections.Generic.Dictionary<string, DsRouterExchangeProviderLib.DSRouterService.DSRouterTagValue> tagsValues) {
            return base.Channel.SaveSettingsToDeviceAsync(dsGuid, devGuid, tagsValues);
        }
        
        public void CommandRun(string ACommandID, System.Collections.Generic.List<object> AParameters) {
            base.Channel.CommandRun(ACommandID, AParameters);
        }
        
        public System.Threading.Tasks.Task CommandRunAsync(string ACommandID, System.Collections.Generic.List<object> AParameters) {
            return base.Channel.CommandRunAsync(ACommandID, AParameters);
        }
        
        public DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates CommandStateCheck(string ACommandID) {
            return base.Channel.CommandStateCheck(ACommandID);
        }
        
        public System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.EnumerationCommandStates> CommandStateCheckAsync(string ACommandID) {
            return base.Channel.CommandStateCheckAsync(ACommandID);
        }
        
        public System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue> GetDocumentsList(ushort dsGuid, int devGuid) {
            return base.Channel.GetDocumentsList(dsGuid, devGuid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DsRouterExchangeProviderLib.DSRouterService.DSRouterDocumentDataValue>> GetDocumentsListAsync(ushort dsGuid, int devGuid) {
            return base.Channel.GetDocumentsListAsync(dsGuid, devGuid);
        }
        
        public string GetDocumentByID(ushort dsGuid, int documentId) {
            return base.Channel.GetDocumentByID(dsGuid, documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentByIDAsync(ushort dsGuid, int documentId) {
            return base.Channel.GetDocumentByIDAsync(dsGuid, documentId);
        }
        
        public bool InitUploadFileSession(ushort dsGuid, int devGuid, string fileName, string comment) {
            return base.Channel.InitUploadFileSession(dsGuid, devGuid, fileName, comment);
        }
        
        public System.Threading.Tasks.Task<bool> InitUploadFileSessionAsync(ushort dsGuid, int devGuid, string fileName, string comment) {
            return base.Channel.InitUploadFileSessionAsync(dsGuid, devGuid, fileName, comment);
        }
        
        public bool UploadFileChunk(byte[] fileChunkBytes) {
            return base.Channel.UploadFileChunk(fileChunkBytes);
        }
        
        public System.Threading.Tasks.Task<bool> UploadFileChunkAsync(byte[] fileChunkBytes) {
            return base.Channel.UploadFileChunkAsync(fileChunkBytes);
        }
        
        public string SaveUploadedFile() {
            return base.Channel.SaveUploadedFile();
        }
        
        public System.Threading.Tasks.Task<string> SaveUploadedFileAsync() {
            return base.Channel.SaveUploadedFileAsync();
        }
        
        public void TerminateUploadFileSession() {
            base.Channel.TerminateUploadFileSession();
        }
        
        public System.Threading.Tasks.Task TerminateUploadFileSessionAsync() {
            return base.Channel.TerminateUploadFileSessionAsync();
        }
        
        public System.DateTime GetCurrentDateTime() {
            return base.Channel.GetCurrentDateTime();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetCurrentDateTimeAsync() {
            return base.Channel.GetCurrentDateTimeAsync();
        }
        
        public void SetTagValueFromHMI(ushort dsGuid, uint devGuid, uint tagGuid, object valinobject) {
            base.Channel.SetTagValueFromHMI(dsGuid, devGuid, tagGuid, valinobject);
        }
        
        public System.Threading.Tasks.Task SetTagValueFromHMIAsync(ushort dsGuid, uint devGuid, uint tagGuid, object valinobject) {
            return base.Channel.SetTagValueFromHMIAsync(dsGuid, devGuid, tagGuid, valinobject);
        }
        
        public void ReSetTagValueFromHMI(ushort dsGuid, uint devGuid, uint tagGuid) {
            base.Channel.ReSetTagValueFromHMI(dsGuid, devGuid, tagGuid);
        }
        
        public System.Threading.Tasks.Task ReSetTagValueFromHMIAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.ReSetTagValueFromHMIAsync(dsGuid, devGuid, tagGuid);
        }
        
        public object GetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.GetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid);
        }
        
        public System.Threading.Tasks.Task<object> GetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.GetTagAnalogTransformationRatioAsync(dsGuid, devGuid, tagGuid);
        }
        
        public void SetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio) {
            base.Channel.SetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid, transformationRatio);
        }
        
        public System.Threading.Tasks.Task SetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid, object transformationRatio) {
            return base.Channel.SetTagAnalogTransformationRatioAsync(dsGuid, devGuid, tagGuid, transformationRatio);
        }
        
        public void ReSetTagAnalogTransformationRatio(ushort dsGuid, uint devGuid, uint tagGuid) {
            base.Channel.ReSetTagAnalogTransformationRatio(dsGuid, devGuid, tagGuid);
        }
        
        public System.Threading.Tasks.Task ReSetTagAnalogTransformationRatioAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.ReSetTagAnalogTransformationRatioAsync(dsGuid, devGuid, tagGuid);
        }
        
        public System.Nullable<bool> IsInverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.IsInverseDiscretTag(dsGuid, devGuid, tagGuid);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> IsInverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.IsInverseDiscretTagAsync(dsGuid, devGuid, tagGuid);
        }
        
        public void InverseDiscretTag(ushort dsGuid, uint devGuid, uint tagGuid, bool newInverseValue) {
            base.Channel.InverseDiscretTag(dsGuid, devGuid, tagGuid, newInverseValue);
        }
        
        public System.Threading.Tasks.Task InverseDiscretTagAsync(ushort dsGuid, uint devGuid, uint tagGuid, bool newInverseValue) {
            return base.Channel.InverseDiscretTagAsync(dsGuid, devGuid, tagGuid, newInverseValue);
        }
        
        public System.Collections.Generic.List<string> GetTagsListWithEnabledTrendSave() {
            return base.Channel.GetTagsListWithEnabledTrendSave();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetTagsListWithEnabledTrendSaveAsync() {
            return base.Channel.GetTagsListWithEnabledTrendSaveAsync();
        }
        
        public System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>> GetTrendDateTimeRanges(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.GetTrendDateTimeRanges(dsGuid, devGuid, tagGuid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<System.DateTime, System.DateTime>>> GetTrendDateTimeRangesAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.GetTrendDateTimeRangesAsync(dsGuid, devGuid, tagGuid);
        }
        
        public System.Collections.Generic.List<System.Tuple<System.DateTime, object>> GetTagTrend(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime) {
            return base.Channel.GetTagTrend(dsGuid, devGuid, tagGuid, startDateTime, endDateTime);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>> GetTagTrendAsync(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime) {
            return base.Channel.GetTagTrendAsync(dsGuid, devGuid, tagGuid, startDateTime, endDateTime);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>> GetTagTrendsList(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime) {
            return base.Channel.GetTagTrendsList(dsGuid, devGuid, tagGuid, startDateTime, endDateTime);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<System.DateTime, object>>>> GetTagTrendsListAsync(ushort dsGuid, uint devGuid, uint tagGuid, System.DateTime startDateTime, System.DateTime endDateTime) {
            return base.Channel.GetTagTrendsListAsync(dsGuid, devGuid, tagGuid, startDateTime, endDateTime);
        }
        
        public DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings GetTrendSettings(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.GetTrendSettings(dsGuid, devGuid, tagGuid);
        }
        
        public System.Threading.Tasks.Task<DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings> GetTrendSettingsAsync(ushort dsGuid, uint devGuid, uint tagGuid) {
            return base.Channel.GetTrendSettingsAsync(dsGuid, devGuid, tagGuid);
        }
        
        public void SetTrendSettings(ushort dsGuid, uint devGuid, uint tagGuid, DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings trendSettings) {
            base.Channel.SetTrendSettings(dsGuid, devGuid, tagGuid, trendSettings);
        }
        
        public System.Threading.Tasks.Task SetTrendSettingsAsync(ushort dsGuid, uint devGuid, uint tagGuid, DsRouterExchangeProviderLib.DSRouterService.DSRouterTrendSettings trendSettings) {
            return base.Channel.SetTrendSettingsAsync(dsGuid, devGuid, tagGuid, trendSettings);
        }
        
        public string GetDailyReport(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings) {
            return base.Channel.GetDailyReport(reportSettings);
        }
        
        public System.Threading.Tasks.Task<string> GetDailyReportAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings) {
            return base.Channel.GetDailyReportAsync(reportSettings);
        }
        
        public byte[] GetDailyReportAsByteArray(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings) {
            return base.Channel.GetDailyReportAsByteArray(reportSettings);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDailyReportAsByteArrayAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterDailyReportSettings reportSettings) {
            return base.Channel.GetDailyReportAsByteArrayAsync(reportSettings);
        }
        
        public string GetEventsReport(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings) {
            return base.Channel.GetEventsReport(reportSettings);
        }
        
        public System.Threading.Tasks.Task<string> GetEventsReportAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings) {
            return base.Channel.GetEventsReportAsync(reportSettings);
        }
        
        public byte[] GetEventsReportAsByteArray(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings) {
            return base.Channel.GetEventsReportAsByteArray(reportSettings);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetEventsReportAsByteArrayAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterEventsReportSettings reportSettings) {
            return base.Channel.GetEventsReportAsByteArrayAsync(reportSettings);
        }
        
        public string GetTagsReport(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings) {
            return base.Channel.GetTagsReport(reportSettings);
        }
        
        public System.Threading.Tasks.Task<string> GetTagsReportAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings) {
            return base.Channel.GetTagsReportAsync(reportSettings);
        }
        
        public byte[] GetTagsReportAsByteArray(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings) {
            return base.Channel.GetTagsReportAsByteArray(reportSettings);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetTagsReportAsByteArrayAsync(DsRouterExchangeProviderLib.DSRouterService.DSRouterTagsReportSettings reportSettings) {
            return base.Channel.GetTagsReportAsByteArrayAsync(reportSettings);
        }
    }
}
